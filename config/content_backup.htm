<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<h1>每周進度</h1>
<p>week2</p>
<p>python3.8.2</p>
<p>week3</p>
<p>CoppeliaSim</p>
<p>week4</p>
<p>小組討論，如何維持服務</p><h2>week4</h2>
<p>如何解決無法提供長久服務</p>
<p>parse</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/c06esX1zO90" width="560"></iframe></p>
<h2>week3</h2>
<p><a href="https://www.coppeliarobotics.com/helpFiles/index.html">https://www.coppeliarobotics.com/helpFiles/index.html</a></p>
<p>觀看此文章，得出主要內容</p>
<p></p>
<p>具有集成開發環境的機器人模擬器CoppeliaSim基於分佈式控制體系結構：可以通過嵌入式腳本、插件、ROS節點、BlueZero節點，遠程API客戶端或自定義解決方案分別控制每個對象/模型。 這使CoppeliaSim非常通用，非常適合多機器人應用。 控制器可以用C / C ++，Python，Java，Lua，Matlab，Octave或Urbi編寫。</p>
<p>以下只是CoppeliaSim的部分應用程序：</p>
<p>工廠自動化系統仿真<br/>遠程監控<br/>硬件控制<br/>快速原型製作和驗證<br/>安全監控<br/>快速算法開發<br/>機器人相關教育<br/>產品介紹</p>
<p>CoppeliaSim可以用作獨立應用程序，也可以輕鬆地嵌入到主客戶端應用程序中：它的佔用空間小且精心設計的API使CoppeliaSim成為嵌入更高級別應用程序的理想選擇。 集成的Lua腳本解釋器使CoppeliaSim成為了一種極其通用的應用程序，使用戶可以自由組合低級/高級功能以獲得新的高級功能。</p><h2>week2</h2>
<p>python 從3.7.3更新至3.8.2版</p>
<p>python:</p>
<p>到<a href="https://www.python.org/downloads/release/python-382/">https://www.python.org/downloads/release/python-382/</a>下載<span>Windows x86-64 executable installer執行</span></p>
<p><span><img alt="" height="200" src="/images/py install 01.png" width="330"/></span></p>
<p><span><img alt="" height="200" src="/images/py install 02.png" width="330"/></span></p>
<p><img alt="" height="200" src="/images/py install 03.png" width="330"/></p>
<p><img alt="" height="200" src="/images/py install 04.png" width="330"/></p>
<p>到剛剛的安裝位置複製pytho 3.8.2(此時我已改名稱為py38)</p>
<p>貼到自己所建的data目錄下</p>
<p><img caption="false" height="241" src="/images/data py.png" width="400"/></p>
<p><span>scite:</span></p>
<p><span>下載 </span><span>”<span> </span><a href="https://www.scintilla.org/wscite432.zip">full 64-bit download，載完後解壓縮</a>，再複製到data底下</span></p>
<p><span>在執行data\wscite432\wscite底下的SciTE.exe</span></p>
<p>按照圖文開啟open Global Options File</p>
<p><span><img alt="" height="400" src="/images/scite option.png" width="400"/></span></p>
<p><span>到300行 更改( code.page=65001 、code.page=0)如圖下所示</span></p>
<p><span><img alt="" height="400" src="/images/scite.png" width="400"/></span></p>
<p>139行的#load.on.activate=1 把#刪掉 在存檔，在關閉scite</p>
<p><span><img alt="" height="400" src="/images/scite load.png" width="400"/></span></p>
<p>在data底下建立home</p>
<p><img alt="" height="74" src="/images/data home.png" width="400"/></p>
<p><img alt="" height="69" src="/images/start&amp;stop.png" width="400"/></p>
<p>打開scite 複製然後存成start.bat</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
subst %Disk%: "data"
 
%Disk%:
 
set HomePath=%Disk%:\home
set HomeDrive=%Disk%:\home
set Home=%Disk%:\home
set USERPROFILE=%Disk%:\home
 
REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"
 
#REM for putty
#Set GIT_HOME=%CDisk%:\portablegit\bin\
#Set GIT_SSH=%Disk%:\putty\plink.exe
 
set PYTHONPATH=%Disk%:\py382\DLLs;%Disk%:\py382\Lib;%Disk%:\py382\Lib\site-packages;
set PYTHONHOME=%Disk%:\py382
 
set path_python=%Disk%:\py382;%Disk%:\py382\Scripts;
set path_msys2=%Disk%:\msys64\mingw64\bin;
set path_git=%Disk%:\portablegit\bin;
set path_tcc=%Disk%:\tcc;
 
path=%Disk%:;%path_python%;%path_msys2%;%path_git%;%path_tcc%;
 
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
 
start /MIN %Disk%:\wscite432\wscite\SciTE.exe
start /MIN %Disk%:\wscite432\wscite\SciTE.exe
 
Exit</pre>
<div class="line number1 index0 alt2"><code class="html plain"></code></div>
<p>這個存成stop.bat</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
path=%PATH%;
 
taskkill /IM python.exe /F
taskkill /IM pythonw.exe /F
taskkill /IM scite.exe /F
 
REM 終止虛擬硬碟與目錄的對應
subst %Disk%: /D
REM 關閉 cmd 指令視窗
taskkill /IM cmd.exe /F
 
EXIT</pre>
<p></p>
<p>MSYS2：<a href="https://www.msys2.org/"><br/>https://www.msys2.org</a></p>
<p>下載 msys2-x86_64-20190524.exe 並執行</p>
<p><img alt="" height="285" src="/images/MSYS2.png" width="400"/></p>
<p>在data底下建立msys64 並安裝此位置</p>
<p><img alt="" height="285" src="/images/MSYS2 01.png" width="400"/></p>
<p><img alt="" height="285" src="/images/MSYS2.png" width="400"/></p>
<p><img alt="" height="284" src="/images/MSYS203.png" width="400"/></p>
<p><span>PortableGit：</span><br/><a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a><span>下載64-bit Git for Windows Portable安裝在data目錄</span><span>下</span></p>
<p><img alt="" height="153" src="/images/git 01.png" width="357"/></p>
<p><img alt="" height="120" src="/images/pip-1.png" width="400"/></p>
<p></p>
<p></p>
<p><span>Tiny C Compiler：<br/></span><span><a href="https://github.com/TinyCC/tinycc">https://github.com/TinyCC/tinycc</a> </span></p>
<p><span>git clone 整個倉儲到 data 目錄下並命名目錄為 tcc</span></p>
<p><span><img alt="" height="40" src="/images/git02.png" width="400"/></span></p>
<p><span>git config --global http.proxy [2001:288:6004:17::53]:3128 </span></p>
<p></p>
<p>用到相關指令</p>
<p>pip install (<span>flask,bs4,xml,elican, mrkdown,flask_cors,leo</span>)</p>
<h1>CoppeliaSim 主要內容</h1>
<p><a>CoppeliaSim</a>高度可定制的模擬器，可以自定義模擬的每個方面。此外對於機器人學習者可以大大降低學習成本。</p>
<p>機器人設計工具可以透過v-rep裡的模擬平台，加入相關引擎、物理碰撞等旋轉功能。</p>
<p>v-rep是一款靈活、可拓展的通用機器人模擬器，支持六種不同的編程或編碼方法，每種方法都具有相對於其他方法的特殊優點（顯然還有缺點），但所有六種方法都是相互兼容的（即可以同時使用，甚至可以協同使用）。</p>
<p>這可以通過精心設計的應用程序編程接口（API）來實現。</p><h1>問題</h1>
<p>當 git pull 發生錯誤可以用這個指令回到舊版本</p>
<p><span>git </span><span class="hljs-keyword">reset</span><span> </span><span class="hljs-comment">--hard</span></p>