var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': '每周進度', 'text': 'week2 \n python3.8.2 \n week3 \n CoppeliaSim \n', 'tags': '', 'url': '每周進度.html'}, {'title': 'week4', 'text': '如何解決無法提供長久服務 \n parse', 'tags': '', 'url': 'week4.html'}, {'title': 'week3', 'text': 'https://www.coppeliarobotics.com/helpFiles/index.html \n 具有集成開發環境的機器人模擬器CoppeliaSim基於分佈式控制體系結構：可以通過嵌入式腳本、插件、ROS節點、BlueZero節點，遠程API客戶端或自定義解決方案分別控制每個對象/模型。 這使CoppeliaSim非常通用，非常適合多機器人應用。 控制器可以用C / C ++，Python，Java，Lua，Matlab，Octave或Urbi編寫。 \n 以下只是CoppeliaSim的部分應用程序： \n 工廠自動化系統仿真 遠程監控 硬件控制 快速原型製作和驗證 安全監控 快速算法開發 機器人相關教育 產品介紹 \n CoppeliaSim可以用作獨立應用程序，也可以輕鬆地嵌入到主客戶端應用程序中：它的佔用空間小且精心設計的API使CoppeliaSim成為嵌入更高級別應用程序的理想選擇。 集成的Lua腳本解釋器使CoppeliaSim成為了一種極其通用的應用程序，使用戶可以自由組合低級/高級功能以獲得新的高級功能。 \n', 'tags': '', 'url': 'week3.html'}, {'title': 'CoppeliaSim', 'text': 'CoppeliaSim 高度可定制的模擬器，可以自定義模擬的每個方面。此外模擬器本身可以進行定制，以使性能完全符合要求。 \n 這可以通過精心設計的應用程序編程接口（API）來實現。 \n 支持六種不同的編程或編碼方法，每種方法都具有相對於其他方法的特殊優點（顯然還有缺點），但所有六種方法都是相互兼容的（即可以同時使用，甚至可以協同使用）。 \n', 'tags': '', 'url': 'CoppeliaSim.html'}, {'title': 'week2', 'text': 'python 從3.7.3更新至3.8.2版 \n python: \n 到 https://www.python.org/downloads/release/python-382/ 下載 Windows x86-64 executable installer執行 \n \n \n \n \n 到剛剛的安裝位置複製pytho 3.8.2(此時我已改名稱為py38) \n 貼到自己所建的data目錄下 \n \n scite: \n 下載\xa0 ” \xa0 full 64-bit download，載完後解壓縮 ，再複製到data底下 \n 在執行data\\wscite432\\wscite底下的SciTE.exe \n 按照圖文開啟open Global Options File \n \n 到300行 更改( code.page=65001 、code.page=0)如圖下所示 \n \n 139行的#load.on.activate=1 把#刪掉 在存檔，在關閉scite \n \n 在data底下建立home \n \n \n 打開scite 複製然後存成start.bat \n @echo off\nset Disk=y\nsubst %Disk%: "data"\n\xa0\n%Disk%:\n\xa0\nset HomePath=%Disk%:\\home\nset HomeDrive=%Disk%:\\home\nset Home=%Disk%:\\home\nset USERPROFILE=%Disk%:\\home\n\xa0\nREM 將系統 Python 程式的 io 設為 utf-8\nset PYTHONIOENCODING="utf-8"\n\xa0\n#REM for putty\n#Set GIT_HOME=%CDisk%:\\portablegit\\bin\\\n#Set GIT_SSH=%Disk%:\\putty\\plink.exe\n\xa0\nset PYTHONPATH=%Disk%:\\py382\\DLLs;%Disk%:\\py382\\Lib;%Disk%:\\py382\\Lib\\site-packages;\nset PYTHONHOME=%Disk%:\\py382\n\xa0\nset path_python=%Disk%:\\py382;%Disk%:\\py382\\Scripts;\nset path_msys2=%Disk%:\\msys64\\mingw64\\bin;\nset path_git=%Disk%:\\portablegit\\bin;\nset path_tcc=%Disk%:\\tcc;\n\xa0\npath=%Disk%:;%path_python%;%path_msys2%;%path_git%;%path_tcc%;\n\xa0\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\n\xa0\nstart /MIN %Disk%:\\wscite432\\wscite\\SciTE.exe\nstart /MIN %Disk%:\\wscite432\\wscite\\SciTE.exe\n\xa0\nExit \n \n 這個存成stop.bat \n @echo off\nset Disk=y\npath=%PATH%;\n \ntaskkill /IM python.exe /F\ntaskkill /IM pythonw.exe /F\ntaskkill /IM scite.exe /F\n \nREM 終止虛擬硬碟與目錄的對應\nsubst %Disk%: /D\nREM 關閉 cmd 指令視窗\ntaskkill /IM cmd.exe /F\n \nEXIT \n \n MSYS2： https://www.msys2.org \n 下載\xa0msys2-x86_64-20190524.exe\xa0並執行 \n \n 在data底下建立msys64 並安裝此位置 \n \n \n \n PortableGit： https://git-scm.com/download/win 下載64-bit Git for Windows Portable安裝在data目錄 下 \n \n \n \n \n Tiny C Compiler： https://github.com/TinyCC/tinycc \xa0 \n git clone 整個倉儲到 data 目錄下並命名目錄為 tcc \n \n git config --global http.proxy [2001:288:6004:17::53]:3128\xa0 \n \n 用到相關指令 \n pip install ( flask,bs4,xml,elican, mrkdown,flask_cors,leo )', 'tags': '', 'url': 'week2.html'}]};